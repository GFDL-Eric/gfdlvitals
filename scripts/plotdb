#!/usr/bin/env python

""" CLI script for plotting SQLite files """

import argparse
import os

import gfdlvitals
import matplotlib.pyplot as plt

COUNT = 1


def arguments():
    """
    Function to capture the user-specified command line options
    """
    description = """
    Program for plotting global mean statistics

    For help, contact John.Krasting@noaa.gov

    """

    parser = argparse.ArgumentParser(
        description=description, formatter_class=argparse.RawTextHelpFormatter
    )

    parser.add_argument(
        "dbfiles",
        nargs="+",
        metavar="DB FILES",
        type=str,
        default=os.getcwd(),
        help="Path to input database files",
    )

    parser.add_argument(
        "-a",
        "--align",
        action="store_true",
        default=False,
        help="Align different time axes",
    )

    parser.add_argument(
        "-t",
        "--trend",
        action="store_true",
        default=False,
        help="Add trend lines to plots",
    )

    parser.add_argument(
        "-s",
        "--smooth",
        type=int,
        default=None,
        help="Apply a n-years smoother to all plots",
    )

    parser.add_argument(
        "-l",
        "--labels",
        type=str,
        default=None,
        help="Comma-separated list of dataset labels",
    )

    parser.add_argument(
        "-n",
        "--nyears",
        type=int,
        default=None,
        help="Limit the plotting to a set number of n years",
    )

    args = parser.parse_args()
    return args


def on_key(event, fig, varlist, axes_dict, smooth, nyears, trend):
    """Update plot on keypress of left and right arrow keys

    Parameters
    ----------
    event : mpl keyboard event
        Key press
    fig : matplotlib.pyplot.figure
        Matplotlib figure handle
    varlist : list
        List of variables to plot
    axes_dict : dict
        Internal structure of axes associations to the data
    smooth : int, None type
        Integer number of years to apply as a smoother
    nyears : int, None type
        Integer number to years to limit the plotting
    trend : bool
        Add linear trend lines if True, omit if False
    """
    global COUNT

    redraw = False

    if (event.key == "right") or (event.key == "left"):
        COUNT = (COUNT + 1) if event.key == "right" else (COUNT - 1)
        COUNT = 0 if COUNT < 0 else COUNT
        COUNT = len(varlist) - 1 if COUNT >= len(varlist) else COUNT
        varname = varlist[COUNT]
        redraw = True

    if redraw is True:
        _ = gfdlvitals.plot.update_figure(
            fig, axes_dict, varname, smooth, nyears, trend
        )


if __name__ == "__main__":
    cliargs = arguments()
    dsets = [gfdlvitals.open_db(x) for x in cliargs.dbfiles]

    all_variables = [set(x.columns) for x in dsets]
    common_variables = set.intersection(*all_variables)
    
    extra_variables = [sorted(list(x-common_variables)) for x in all_variables]

    for x,varlist in enumerate(extra_variables):
        if len(varlist) > 0:
            print(f"The following variables are availble only "+
                  f"{cliargs.dbfiles[x]} and will not be plotted:\n")

            if len(varlist) % 2 != 0:
                varlist.append(" ")
            
            split = int(len(varlist)/2)
            _list1 = varlist[0:split]
            _list2 = varlist[split:]
            for key, value in zip(_list1,_list2):
                print("{0:<20s} {1}".format(key, value))
            print("\n")

    variable_list = sorted(list(common_variables))

    mplfig, axes = gfdlvitals.plot.plot_timeseries(
        dsets,
        variable_list[0],
        trend=cliargs.trend,
        align_times=cliargs.align,
        smooth=cliargs.smooth,
        nyears=cliargs.nyears,
        labels=cliargs.labels,
    )
    cid = mplfig.canvas.mpl_connect(
        "key_press_event",
        lambda event: on_key(
            event,
            mplfig,
            variable_list,
            axes,
            cliargs.smooth,
            cliargs.nyears,
            cliargs.trend,
        ),
    )

    plt.tight_layout()

    plt.show(block=True)
